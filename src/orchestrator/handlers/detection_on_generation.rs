use std::collections::HashMap;

use http::HeaderMap;
use opentelemetry::trace::TraceId;

use super::Handle;
use crate::{
    models::{DetectionOnGeneratedHttpRequest, DetectionOnGenerationResult, DetectorParams},
    orchestrator::{Error, Orchestrator},
};

impl Handle<DetectionOnGenerationTask> for Orchestrator {
    type Response = DetectionOnGenerationResult;

    async fn handle(&self, _task: DetectionOnGenerationTask) -> Result<Self::Response, Error> {
        todo!()
    }
}

#[derive(Debug)]
pub struct DetectionOnGenerationTask {
    /// Unique identifier of request trace
    pub trace_id: TraceId,
    /// User prompt to be sent to the LLM
    pub prompt: String,
    /// Text generated by the LLM
    pub generated_text: String,
    /// Detectors configuration
    pub detectors: HashMap<String, DetectorParams>,
    // Headermap
    pub headers: HeaderMap,
}

impl DetectionOnGenerationTask {
    pub fn new(
        trace_id: TraceId,
        request: DetectionOnGeneratedHttpRequest,
        headers: HeaderMap,
    ) -> Self {
        Self {
            trace_id,
            prompt: request.prompt,
            generated_text: request.generated_text,
            detectors: request.detectors,
            headers,
        }
    }
}
